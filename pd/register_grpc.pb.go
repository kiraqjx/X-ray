// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XRayClient is the client API for XRay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XRayClient interface {
	Register(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type xRayClient struct {
	cc grpc.ClientConnInterface
}

func NewXRayClient(cc grpc.ClientConnInterface) XRayClient {
	return &xRayClient{cc}
}

func (c *xRayClient) Register(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/pd.XRay/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XRayServer is the server API for XRay service.
// All implementations must embed UnimplementedXRayServer
// for forward compatibility
type XRayServer interface {
	Register(context.Context, *Nodes) (*RegisterResponse, error)
	mustEmbedUnimplementedXRayServer()
}

// UnimplementedXRayServer must be embedded to have forward compatible implementations.
type UnimplementedXRayServer struct {
}

func (UnimplementedXRayServer) Register(context.Context, *Nodes) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedXRayServer) mustEmbedUnimplementedXRayServer() {}

// UnsafeXRayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XRayServer will
// result in compilation errors.
type UnsafeXRayServer interface {
	mustEmbedUnimplementedXRayServer()
}

func RegisterXRayServer(s grpc.ServiceRegistrar, srv XRayServer) {
	s.RegisterService(&XRay_ServiceDesc, srv)
}

func _XRay_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pd.XRay/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRayServer).Register(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

// XRay_ServiceDesc is the grpc.ServiceDesc for XRay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XRay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pd.XRay",
	HandlerType: (*XRayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _XRay_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "register.proto",
}
